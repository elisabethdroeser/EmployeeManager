@page "/employees/add"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory

<PageTitle>Add Employee</PageTitle>

<h1>Add Employee</h1>

@if (Employee is not null)
{
  <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="firstname" class="form-label">First name</label>
            <InputText id="firstname" class="form-control" @bind-Value="Employee.FirstName" />
            @*<ValidationMessage For="() => Employee.FirstName"/>*@
        </div>
        <div class="mb-3">
            <label for="lastname" class="form-label">Last name</label>
            <InputText id="lastname" class="form-control" @bind-Value="Employee.LastName" />
            @*<ValidationMessage For="() => Employee.LastName"/>*@
        </div>
        <div class="mb-3">
            <label for="department" class="form-label">Department</label>
            <InputSelect id="department" class="form-select" @bind-Value="Employee.DepartmentId">
                @if (Departments is not null)
                {
                @foreach (var department in Departments)
                    {
                    <option value="@department.Id">@department.Name</option>
                    }
                }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label for="isDeveloper" class="form-label">Is developer?</label>
        <InputCheckbox id="isDeveloper" class="form-check-input" @bind-Value="Employee.IsDeveloper" />
    </div>

    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>
}

@code {
    private Employee? Employee { get; set; }

    private Department[]? Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();

        Departments = await context.Departments
            .OrderBy(dept => dept.Name)
            .ToArrayAsync();

        Employee = new()
            {
                DepartmentId = Departments.FirstOrDefault()?.Id
            };
    }
    
    private async Task HandleValidSubmit()
    {
        if (Employee is not null)
        {
            using var context = ContextFactory.CreateDbContext();

            context.Employees.Add(Employee);
            await context.SaveChangesAsync();

            //New employee for next creation

            Employee = new()
            {
                DepartmentId = Employee.DepartmentId
            };
        }
    }
}